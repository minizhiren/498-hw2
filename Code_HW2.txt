// server.js
const express = require('express');
const mariadb = require('mariadb');
const path = require('path');
const bodyParser = require('body-parser');
const app = express();
app.use(express.json());

const port = 80; // Changed port to 80 as required

// Create a MariaDB connection pool
const pool = mariadb.createPool({
    host: '127.0.0.1', // Use IP address to force TCP connection
    port: 3306, // Ensure this is the correct port
    user: 'your_username', // Changed from 'username' to 'user'
    password: 'your_password', // Replace with your MariaDB password
    database: 'bankdb', // Our database name created above
    connectionLimit: 5
});

// Set EJS as the view engine and set the views directory
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Use body-parser middleware to parse form data (if you prefer explicit usage)
app.use(bodyParser.urlencoded({ extended: true }));

// Alternatively, you can use Express's built-in parsing:
// app.use(express.urlencoded({ extended: true }));

// Route: Display form and customer table
app.get('/', async (req, res) => {
    let conn;
    try {
        conn = await pool.getConnection();
        // Get all customers from the table
        const customers = await conn.query('SELECT * FROM customers');
        res.render('index', { customers });
    } catch (err) {
        res.status(500).send(`Error retrieving customers: ${err}`);
    } finally {
        if (conn) conn.release();
    }
});

// Route: Add a new customer
app.post('/add', async (req, res) => {
    const name = req.body.name;
    // Generate a random balance between 100 and 10,000 (two decimal places)
    const balance = (Math.random() * (10000 - 100) + 100).toFixed(2);
    let conn;
    try {
        conn = await pool.getConnection();
        await conn.query('INSERT INTO customers(name, balance) VALUES (?, ?)', [name, balance]);
        res.redirect('/');
    } catch (err) {
        res.status(500).send(`Error adding customer: ${err}`);
    } finally {
        if (conn) conn.release();
    }
});


app.post('/register', async (req, res) => {
    const { username } = req.body;

    if (!username) {
        return res.status(400).json({ error: "Invalid input: 'username' is required." });
    }

    let conn;
    try {
        conn = await pool.getConnection();
        await conn.query("INSERT INTO Users (username) VALUES (?)", [username]);
        res.status(201).json({ message: "User registered successfully!", username });
    } catch (err) {
        console.error("Error registering user:", err);
        res.status(500).json({ error: "Database error" });
    } finally {
        if (conn) conn.release();
    }
});



app.get('/users', async (req, res) => {
    let conn;
    try {
        conn = await pool.getConnection();
        const rows = await conn.query("SELECT username FROM Users");
        const users = rows.map(row => row.username);
        res.json({ users });
    } catch (err) {
        console.error("Error fetching users:", err);
        res.status(500).json({ error: "Database error" });
    } finally {
        if (conn) conn.release();
    }
});


// ✅ **新加 `/clear` 路由，清空用户表**
app.post('/clear', async (req, res) => {
    let conn;
    try {
        conn = await pool.getConnection();
        await conn.query('DELETE FROM Users');
        res.json({ message: "All users have been deleted." });
    } catch (err) {
        res.status(500).json({ error: `Error clearing users: ${err}` });
    } finally {
        if (conn) conn.release();
    }
});

app.listen(port, () => {
    console.log(`Server is running on http://34.42.139.104:${port}`); // Updated message with external IP placeho>
});





------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Bank Customers & User Management</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        table { border-collapse: collapse; width: 100%; max-width: 600px; margin-bottom: 20px; }
        th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
        .container { max-width: 800px; margin: auto; }
    </style>
</head>
<body>

    <div class="container">
        <h1 class="text-center">Bank Customers</h1>

        <!-- ✅ 添加银行客户 -->
        <h2>Add a New Customer</h2>
        <form action="/add" method="POST">
            <input type="text" name="name" id="customer-name" placeholder="Enter customer name" required>
            <button type="submit" class="btn btn-primary">Add Customer</button>
        </form>

        <!-- ✅ 显示银行客户列表 -->
        <h2>Customer List</h2>
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Balance</th>
                </tr>
            </thead>
            <tbody>
                <% if (customers && customers.length) { %>
                    <% customers.forEach(customer => { %>
                        <tr>
                            <td><%= customer.id %></td>
                            <td><%= customer.name %></td>
                            <td>$<%= customer.balance %></td>
                        </tr>
                    <% }); %>
                <% } else { %>
                    <tr>
                        <td colspan="3">No customers found.</td>
                    </tr>
                <% } %>
            </tbody>
        </table>

        <!-- ✅ 用户管理部分 -->
        <h1 class="text-center">User Management</h1>

        <!-- ✅ 注册用户 --> <h2>Register a User</h2>
    <input type="text" id="username" placeholder="Enter username">
    <button onclick="registerUser()">Register</button>



  <h2>Users List</h2>
    <button onclick="fetchUsers()">Refresh Users</button>
    <ul id="users-list"></ul>


        <!-- ✅ 清空用户 -->
        <h2>Clear All Users</h2>
        <button onclick="clearUsers()" class="btn btn-danger">Clear Users</button>
    </div>

    <script>


 async function registerUser() {
            const username = document.getElementById("username").value.trim();

            if (!username) {
                alert("Please enter a username.");
                return;
            }

            try {
                const response = await fetch("/register", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ username })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const result = await response.json();
                alert(result.message || "User registered successfully!");
                document.getElementById("username").value = "";
                fetchUsers(); // 立即刷新用户列表

            } catch (error) {
                console.error("❌ Fetch failed:", error);
                alert("Failed to register user. See console for details.");
            }
        }





async function fetchUsers() {
            try {
                const response = await fetch("/users");
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                const usersList = document.getElementById("users-list");
                usersList.innerHTML = "";

                data.users.forEach(user => {
                    const listItem = document.createElement("li");
                    listItem.textContent = user;
                    usersList.appendChild(listItem);
                });

            } catch (error) {
                console.error("❌ Fetch failed:", error);
                alert("Failed to fetch users. See console for details.");
            }
        }


        // ✅ 清空用户表
        async function clearUsers() {
            try {
                const response = await fetch("/clear", { method: "POST" });
                const result = await response.json();
                alert(result.message);
                fetchUsers();
            } catch (error) {
                console.error("❌ Fetch failed:", error);
                alert("Failed to clear users.");
            }
        }
    </script>

</body>
</html>
